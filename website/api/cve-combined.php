<?php
/**
 * Combined CVE API (Refactored)
 * 
 * This endpoint aggregates CVE data from multiple sources:
 * 1. NVD (National Vulnerability Database)
 * 2. MITRE CVE List
 * 3. CISA Known Exploited Vulnerabilities (KEV) Catalog
 * 
 * It merges and normalizes the data to provide a comprehensive view
 * of vulnerabilities with enriched metadata from all sources.
 */

// Load shared utilities
require_once __DIR__ . '/lib/autoload.php';

// Initialize utilities
$config = Config::getInstance();
$response = new Response();
$cache = new Cache('cve-combined');
$httpClient = new HttpClient('cve-combined');

// Handle CORS
CORS::simple(false);

// Apply rate limiting (30 requests per minute for combined API)
RateLimit::simple('cve-combined');

// Validate input
$validator = new Validator();
$validator->required('id', 'CVE ID is required')
          ->cveId('id', 'Invalid CVE ID format');

if ($validator->fails()) {
    $response->validationError($validator->errors());
}

$cveId = strtoupper(trim($validator->get('id')));

// Try to get from cache
$cacheKey = 'combined_' . $cveId;
$cacheTTL = 3600; // 1 hour cache

$result = $cache->remember($cacheKey, function() use ($cveId, $httpClient) {
    $combinedData = [
        'id' => $cveId,
        'sources' => [],
        'merged' => [
            'id' => $cveId,
            'description' => null,
            'published' => null,
            'modified' => null,
            'severity' => null,
            'score' => null,
            'cvss' => [],
            'references' => [],
            'affected_products' => [],
            'is_known_exploited' => false,
            'cisa_kev_info' => null
        ]
    ];
    
    // 1. Fetch from NVD
    try {
        $nvdUrl = "https://services.nvd.nist.gov/rest/json/cves/v2?cveId=" . urlencode($cveId);
        $nvdResponse = $httpClient->json('GET', $nvdUrl);
        
        if ($nvdResponse['success'] && isset($nvdResponse['data']['vulnerabilities'][0])) {
            $nvdData = $nvdResponse['data']['vulnerabilities'][0]['cve'];
            $combinedData['sources']['nvd'] = parseNVDData($nvdData);
            
            // Use NVD as primary source for description and dates
            $merged = &$combinedData['merged'];
            $merged['published'] = $nvdData['published'] ?? null;
            $merged['modified'] = $nvdData['lastModified'] ?? null;
            
            // Extract description
            if (isset($nvdData['descriptions'])) {
                foreach ($nvdData['descriptions'] as $desc) {
                    if ($desc['lang'] === 'en') {
                        $merged['description'] = $desc['value'];
                        break;
                    }
                }
            }
            
            // Extract CVSS metrics
            if (isset($nvdData['metrics'])) {
                if (isset($nvdData['metrics']['cvssMetricV31'][0])) {
                    $metric = $nvdData['metrics']['cvssMetricV31'][0];
                    $merged['cvss']['v3.1'] = [
                        'score' => $metric['cvssData']['baseScore'] ?? null,
                        'severity' => $metric['cvssData']['baseSeverity'] ?? null,
                        'vector' => $metric['cvssData']['vectorString'] ?? null
                    ];
                    $merged['score'] = $metric['cvssData']['baseScore'];
                    $merged['severity'] = $metric['cvssData']['baseSeverity'];
                }
            }
            
            // Extract references
            if (isset($nvdData['references'])) {
                foreach ($nvdData['references'] as $ref) {
                    $merged['references'][] = [
                        'url' => $ref['url'],
                        'source' => $ref['source'] ?? 'NVD',
                        'tags' => $ref['tags'] ?? []
                    ];
                }
            }
        }
    } catch (Exception $e) {
        $combinedData['sources']['nvd'] = ['error' => $e->getMessage()];
    }
    
    // 2. Fetch from MITRE (GitHub)
    try {
        if (preg_match('/^CVE-(\d{4})-(\d{4,})$/', $cveId, $matches)) {
            $year = $matches[1];
            $sequence = $matches[2];
            $rangeStart = floor(intval($sequence) / 1000) * 1000;
            $rangeFolder = $rangeStart . 'xxx';
            
            $mitreUrl = sprintf(
                'https://raw.githubusercontent.com/CVEProject/cvelist/master/%s/%s/CVE-%s-%s.json',
                $year,
                $rangeFolder,
                $year,
                $sequence
            );
            
            $mitreResponse = $httpClient->get($mitreUrl);
            
            if ($mitreResponse['success'] && !empty($mitreResponse['body'])) {
                $mitreData = json_decode($mitreResponse['body'], true);
                if (json_last_error() === JSON_ERROR_NONE) {
                    $combinedData['sources']['mitre'] = parseMITREData($mitreData);
                    
                    // Merge affected products from MITRE
                    if (isset($mitreData['containers']['cna']['affected'])) {
                        foreach ($mitreData['containers']['cna']['affected'] as $affected) {
                            $combinedData['merged']['affected_products'][] = [
                                'vendor' => $affected['vendor'] ?? 'Unknown',
                                'product' => $affected['product'] ?? 'Unknown',
                                'versions' => $affected['versions'] ?? []
                            ];
                        }
                    }
                }
            }
        }
    } catch (Exception $e) {
        $combinedData['sources']['mitre'] = ['error' => $e->getMessage()];
    }
    
    // 3. Check CISA KEV
    try {
        $kevUrl = 'https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json';
        $kevResponse = $httpClient->json('GET', $kevUrl);
        
        if ($kevResponse['success'] && isset($kevResponse['data']['vulnerabilities'])) {
            foreach ($kevResponse['data']['vulnerabilities'] as $vuln) {
                if (isset($vuln['cveID']) && strtoupper($vuln['cveID']) === $cveId) {
                    $combinedData['sources']['cisa_kev'] = $vuln;
                    $combinedData['merged']['is_known_exploited'] = true;
                    $combinedData['merged']['cisa_kev_info'] = [
                        'date_added' => $vuln['dateAdded'] ?? null,
                        'due_date' => $vuln['dueDate'] ?? null,
                        'notes' => $vuln['notes'] ?? null,
                        'known_ransomware_use' => $vuln['knownRansomwareCampaignUse'] ?? false
                    ];
                    break;
                }
            }
        }
    } catch (Exception $e) {
        $combinedData['sources']['cisa_kev'] = ['error' => $e->getMessage()];
    }
    
    // Generate summary
    $combinedData['summary'] = generateSummary($combinedData);
    
    return $combinedData;
}, $cacheTTL);

// Send response
$response->success($result);

/**
 * Parse NVD data into standard format
 */
function parseNVDData($data) {
    $parsed = [
        'source' => 'NVD',
        'id' => $data['id'] ?? null,
        'published' => $data['published'] ?? null,
        'modified' => $data['lastModified'] ?? null,
        'status' => $data['vulnStatus'] ?? null,
        'description' => null,
        'cvss' => [],
        'references' => []
    ];
    
    // Extract description
    if (isset($data['descriptions'])) {
        foreach ($data['descriptions'] as $desc) {
            if ($desc['lang'] === 'en') {
                $parsed['description'] = $desc['value'];
                break;
            }
        }
    }
    
    // Extract CVSS
    if (isset($data['metrics'])) {
        if (isset($data['metrics']['cvssMetricV31'])) {
            foreach ($data['metrics']['cvssMetricV31'] as $metric) {
                $parsed['cvss']['v3.1'] = [
                    'score' => $metric['cvssData']['baseScore'] ?? null,
                    'severity' => $metric['cvssData']['baseSeverity'] ?? null,
                    'vector' => $metric['cvssData']['vectorString'] ?? null,
                    'source' => $metric['source'] ?? null
                ];
                break;
            }
        }
    }
    
    // Extract references
    if (isset($data['references'])) {
        $parsed['references'] = $data['references'];
    }
    
    return $parsed;
}

/**
 * Parse MITRE data into standard format
 */
function parseMITREData($data) {
    $parsed = [
        'source' => 'MITRE',
        'state' => $data['cveMetadata']['state'] ?? null,
        'assigner' => $data['cveMetadata']['assignerOrgId'] ?? null,
        'date_published' => $data['cveMetadata']['datePublished'] ?? null,
        'date_updated' => $data['cveMetadata']['dateUpdated'] ?? null,
        'affected_products' => []
    ];
    
    if (isset($data['containers']['cna']['affected'])) {
        foreach ($data['containers']['cna']['affected'] as $affected) {
            $parsed['affected_products'][] = [
                'vendor' => $affected['vendor'] ?? null,
                'product' => $affected['product'] ?? null,
                'versions' => $affected['versions'] ?? []
            ];
        }
    }
    
    return $parsed;
}

/**
 * Generate a summary of the combined data
 */
function generateSummary($data) {
    $summary = [
        'data_sources' => array_keys(array_filter($data['sources'], function($source) {
            return !isset($source['error']);
        })),
        'is_actively_exploited' => $data['merged']['is_known_exploited'],
        'severity_level' => $data['merged']['severity'] ?? 'Unknown',
        'cvss_score' => $data['merged']['score'] ?? null,
        'total_references' => count($data['merged']['references']),
        'affected_vendors' => array_unique(array_column($data['merged']['affected_products'], 'vendor'))
    ];
    
    return $summary;
}