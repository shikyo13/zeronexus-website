<?php
/**
 * CVE Search API (Refactored)
 * 
 * Comprehensive CVE search supporting multiple query types
 * Using modular utilities for better code organization
 * 
 * Parameters:
 * - id: Search by specific CVE ID
 * - year: Search by year (YYYY format)
 * - keyword: Search by keyword in descriptions
 * - vendor: Search by vendor name
 * - severity: Filter by severity (critical, high, medium, low)
 * - recent: Get recent CVEs (use recent=true)
 * - page: Page number for pagination (default: 1)
 * - limit: Results per page (default: 20, max: 100)
 */

// Load shared utilities
require_once __DIR__ . '/lib/autoload.php';

// Initialize utilities
$config = Config::getInstance();
$response = new Response();
$cache = new Cache('cve-search');
$httpClient = new HttpClient('cve-search');

// Handle CORS
CORS::simple(false);

// Apply rate limiting (60 requests per minute for search)
RateLimit::simple('cve-search');

// Get search parameters
$searchParams = [
    'id' => $_GET['id'] ?? null,
    'year' => $_GET['year'] ?? null,
    'keyword' => $_GET['keyword'] ?? null,
    'vendor' => $_GET['vendor'] ?? null,
    'severity' => $_GET['severity'] ?? null,
    'recent' => isset($_GET['recent']) && $_GET['recent'] === 'true',
    'page' => isset($_GET['page']) ? intval($_GET['page']) : 1,
    'limit' => isset($_GET['limit']) ? intval($_GET['limit']) : 20
];

// Validate parameters
$validator = new Validator($searchParams);

// Validate pagination
$validator->integer('page', 1, 1000)
          ->integer('limit', 1, 100);

// Validate specific search parameters
if ($searchParams['id']) {
    $validator->cveId('id');
}

if ($searchParams['year']) {
    $validator->integer('year', 1999, date('Y'));
}

if ($searchParams['severity']) {
    $validator->in('severity', ['critical', 'high', 'medium', 'low']);
}

if ($validator->fails()) {
    $response->validationError($validator->errors());
}

// Ensure valid pagination values
$searchParams['page'] = max(1, $searchParams['page']);
$searchParams['limit'] = min(100, max(1, $searchParams['limit']));

// Determine search type
$searchType = null;
if ($searchParams['id']) {
    $searchType = 'id';
} elseif ($searchParams['year']) {
    $searchType = 'year';
} elseif ($searchParams['keyword']) {
    $searchType = 'keyword';
} elseif ($searchParams['vendor']) {
    $searchType = 'vendor';
} elseif ($searchParams['recent']) {
    $searchType = 'recent';
} else {
    $response->error('No search parameters provided. Use id, year, keyword, vendor, or recent=true', 400);
}

// Create cache key based on search parameters
$cacheKey = 'search_' . $searchType . '_' . md5(json_encode($searchParams));
$cacheTTL = 3600; // 1 hour cache

try {
    $result = $cache->remember($cacheKey, function() use ($searchParams, $searchType, $httpClient) {
        switch ($searchType) {
            case 'id':
                return searchById($searchParams['id'], $httpClient);
                
            case 'year':
                return searchByYear($searchParams['year'], $searchParams['page'], $searchParams['limit'], $httpClient);
                
            case 'keyword':
                return searchByKeyword($searchParams['keyword'], $searchParams['page'], $searchParams['limit'], $searchParams['severity'], $httpClient);
                
            case 'vendor':
                return searchByVendor($searchParams['vendor'], $searchParams['page'], $searchParams['limit'], $searchParams['severity'], $httpClient);
                
            case 'recent':
                return searchRecent($searchParams['page'], $searchParams['limit'], $httpClient);
                
            default:
                throw new Exception('Invalid search type');
        }
    }, $cacheTTL);
    
    $response->success($result);
} catch (Exception $e) {
    $response->error($e->getMessage(), 500);
}

/**
 * Search by CVE ID
 */
function searchById($cveId, $httpClient) {
    $cveId = strtoupper(trim($cveId));
    
    // Try NVD API first
    $url = "https://services.nvd.nist.gov/rest/json/cves/v2?cveId=" . urlencode($cveId);
    $apiResponse = $httpClient->json('GET', $url);
    
    if ($apiResponse['success'] && isset($apiResponse['data']['vulnerabilities']) && count($apiResponse['data']['vulnerabilities']) > 0) {
        $vuln = $apiResponse['data']['vulnerabilities'][0]['cve'];
        return [
            'search_type' => 'id',
            'query' => $cveId,
            'total_results' => 1,
            'vulnerabilities' => [formatCveData($vuln)]
        ];
    }
    
    return [
        'search_type' => 'id',
        'query' => $cveId,
        'total_results' => 0,
        'vulnerabilities' => []
    ];
}

/**
 * Search by year
 */
function searchByYear($year, $page, $limit, $httpClient) {
    // Load year-search.php utility
    require_once __DIR__ . '/year-search.php';
    
    // Use the existing year search function
    $allCves = searchCvesByYear($year);
    
    if (!$allCves || !is_array($allCves)) {
        return [
            'search_type' => 'year',
            'query' => $year,
            'total_results' => 0,
            'page' => $page,
            'limit' => $limit,
            'vulnerabilities' => []
        ];
    }
    
    // Paginate results
    $total = count($allCves);
    $offset = ($page - 1) * $limit;
    $pageCves = array_slice($allCves, $offset, $limit);
    
    // Format results
    $vulnerabilities = array_map(function($cve) {
        return [
            'id' => $cve['id'],
            'sourceIdentifier' => $cve['assigner'] ?? null,
            'published' => $cve['published'] ?? null,
            'lastModified' => $cve['updated'] ?? null,
            'vulnStatus' => $cve['state'] ?? null,
            'descriptions' => isset($cve['description']) ? [$cve['description']] : [],
            'severity' => $cve['severity'] ?? null,
            'score' => $cve['score'] ?? null
        ];
    }, $pageCves);
    
    return [
        'search_type' => 'year',
        'query' => $year,
        'total_results' => $total,
        'page' => $page,
        'limit' => $limit,
        'total_pages' => ceil($total / $limit),
        'vulnerabilities' => $vulnerabilities
    ];
}

/**
 * Search by keyword
 */
function searchByKeyword($keyword, $page, $limit, $severity, $httpClient) {
    $startIndex = ($page - 1) * $limit;
    
    // Build NVD API URL with keyword search
    $url = "https://services.nvd.nist.gov/rest/json/cves/v2";
    $params = [
        'keywordSearch' => $keyword,
        'resultsPerPage' => $limit,
        'startIndex' => $startIndex
    ];
    
    if ($severity) {
        $params['cvssV3Severity'] = strtoupper($severity);
    }
    
    $url .= '?' . http_build_query($params);
    
    $apiResponse = $httpClient->json('GET', $url);
    
    if (!$apiResponse['success'] || !isset($apiResponse['data'])) {
        return createEmptyResult('keyword', $keyword, $page, $limit);
    }
    
    $data = $apiResponse['data'];
    $vulnerabilities = [];
    
    if (isset($data['vulnerabilities'])) {
        foreach ($data['vulnerabilities'] as $vuln) {
            $vulnerabilities[] = formatCveData($vuln['cve']);
        }
    }
    
    return [
        'search_type' => 'keyword',
        'query' => $keyword,
        'severity_filter' => $severity,
        'total_results' => $data['totalResults'] ?? 0,
        'page' => $page,
        'limit' => $limit,
        'total_pages' => ceil(($data['totalResults'] ?? 0) / $limit),
        'vulnerabilities' => $vulnerabilities
    ];
}

/**
 * Search by vendor
 */
function searchByVendor($vendor, $page, $limit, $severity, $httpClient) {
    $startIndex = ($page - 1) * $limit;
    
    // Build NVD API URL with CPE match string for vendor
    $url = "https://services.nvd.nist.gov/rest/json/cves/v2";
    $params = [
        'cpeName' => "cpe:2.3:*:{$vendor}:*",
        'resultsPerPage' => $limit,
        'startIndex' => $startIndex
    ];
    
    if ($severity) {
        $params['cvssV3Severity'] = strtoupper($severity);
    }
    
    $url .= '?' . http_build_query($params);
    
    $apiResponse = $httpClient->json('GET', $url);
    
    if (!$apiResponse['success'] || !isset($apiResponse['data'])) {
        // Try keyword search as fallback
        return searchByKeyword($vendor, $page, $limit, $severity, $httpClient);
    }
    
    $data = $apiResponse['data'];
    $vulnerabilities = [];
    
    if (isset($data['vulnerabilities'])) {
        foreach ($data['vulnerabilities'] as $vuln) {
            $vulnerabilities[] = formatCveData($vuln['cve']);
        }
    }
    
    return [
        'search_type' => 'vendor',
        'query' => $vendor,
        'severity_filter' => $severity,
        'total_results' => $data['totalResults'] ?? 0,
        'page' => $page,
        'limit' => $limit,
        'total_pages' => ceil(($data['totalResults'] ?? 0) / $limit),
        'vulnerabilities' => $vulnerabilities
    ];
}

/**
 * Get recent CVEs
 */
function searchRecent($page, $limit, $httpClient) {
    $startIndex = ($page - 1) * $limit;
    
    // Get CVEs from last 7 days
    $endDate = date('Y-m-d\TH:i:s\Z');
    $startDate = date('Y-m-d\TH:i:s\Z', strtotime('-7 days'));
    
    $url = "https://services.nvd.nist.gov/rest/json/cves/v2";
    $params = [
        'lastModStartDate' => $startDate,
        'lastModEndDate' => $endDate,
        'resultsPerPage' => $limit,
        'startIndex' => $startIndex
    ];
    
    $url .= '?' . http_build_query($params);
    
    $apiResponse = $httpClient->json('GET', $url);
    
    if (!$apiResponse['success'] || !isset($apiResponse['data'])) {
        return createEmptyResult('recent', 'last 7 days', $page, $limit);
    }
    
    $data = $apiResponse['data'];
    $vulnerabilities = [];
    
    if (isset($data['vulnerabilities'])) {
        foreach ($data['vulnerabilities'] as $vuln) {
            $vulnerabilities[] = formatCveData($vuln['cve']);
        }
    }
    
    return [
        'search_type' => 'recent',
        'query' => 'last 7 days',
        'date_range' => [
            'start' => $startDate,
            'end' => $endDate
        ],
        'total_results' => $data['totalResults'] ?? 0,
        'page' => $page,
        'limit' => $limit,
        'total_pages' => ceil(($data['totalResults'] ?? 0) / $limit),
        'vulnerabilities' => $vulnerabilities
    ];
}

/**
 * Format CVE data from NVD format
 */
function formatCveData($cve) {
    $formatted = [
        'id' => $cve['id'],
        'sourceIdentifier' => $cve['sourceIdentifier'] ?? null,
        'published' => $cve['published'] ?? null,
        'lastModified' => $cve['lastModified'] ?? null,
        'vulnStatus' => $cve['vulnStatus'] ?? null,
        'descriptions' => [],
        'metrics' => []
    ];
    
    // Extract English descriptions
    if (isset($cve['descriptions'])) {
        foreach ($cve['descriptions'] as $desc) {
            if ($desc['lang'] === 'en') {
                $formatted['descriptions'][] = $desc['value'];
            }
        }
    }
    
    // Extract CVSS metrics
    if (isset($cve['metrics'])) {
        if (isset($cve['metrics']['cvssMetricV31'])) {
            foreach ($cve['metrics']['cvssMetricV31'] as $metric) {
                $formatted['metrics']['cvssV31'] = [
                    'score' => $metric['cvssData']['baseScore'] ?? null,
                    'severity' => $metric['cvssData']['baseSeverity'] ?? null,
                    'vector' => $metric['cvssData']['vectorString'] ?? null
                ];
                $formatted['severity'] = $metric['cvssData']['baseSeverity'] ?? null;
                $formatted['score'] = $metric['cvssData']['baseScore'] ?? null;
                break;
            }
        } elseif (isset($cve['metrics']['cvssMetricV30'])) {
            foreach ($cve['metrics']['cvssMetricV30'] as $metric) {
                $formatted['metrics']['cvssV30'] = [
                    'score' => $metric['cvssData']['baseScore'] ?? null,
                    'severity' => $metric['cvssData']['baseSeverity'] ?? null,
                    'vector' => $metric['cvssData']['vectorString'] ?? null
                ];
                $formatted['severity'] = $metric['cvssData']['baseSeverity'] ?? null;
                $formatted['score'] = $metric['cvssData']['baseScore'] ?? null;
                break;
            }
        } elseif (isset($cve['metrics']['cvssMetricV2'])) {
            foreach ($cve['metrics']['cvssMetricV2'] as $metric) {
                $formatted['metrics']['cvssV2'] = [
                    'score' => $metric['cvssData']['baseScore'] ?? null,
                    'severity' => $metric['baseSeverity'] ?? null,
                    'vector' => $metric['cvssData']['vectorString'] ?? null
                ];
                $formatted['severity'] = $metric['baseSeverity'] ?? null;
                $formatted['score'] = $metric['cvssData']['baseScore'] ?? null;
                break;
            }
        }
    }
    
    return $formatted;
}

/**
 * Create empty result structure
 */
function createEmptyResult($searchType, $query, $page, $limit) {
    return [
        'search_type' => $searchType,
        'query' => $query,
        'total_results' => 0,
        'page' => $page,
        'limit' => $limit,
        'total_pages' => 0,
        'vulnerabilities' => []
    ];
}