<?php
/**
 * CVE Search API
 * 
 * This endpoint provides proxy access to the NVD API for CVE lookups.
 * 
 * Parameters:
 * - id: A specific CVE ID (e.g., CVE-2023-12345)
 * - year: A year to search for CVEs (e.g., 2023)
 */

// Set security headers
header('Content-Type: application/json');
header('X-Content-Type-Options: nosniff');
header('X-Frame-Options: DENY');
header('Referrer-Policy: strict-origin-when-cross-origin');
header('X-XSS-Protection: 1; mode=block');

// Enable CORS for specific origins, with Cloudflare support
$allowedOrigins = [
    'https://zeronexus.net',
    'https://www.zeronexus.net',
    'http://localhost:8081' // For local development
];

$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';

// Check if origin is allowed or is a subdomain of zeronexus.net
$isAllowed = in_array($origin, $allowedOrigins);
if (!$isAllowed && preg_match('/^https?:\/\/.*\.zeronexus\.net(:[0-9]+)?$/', $origin)) {
    $isAllowed = true;
}

if ($isAllowed) {
    header("Access-Control-Allow-Origin: $origin");
    header('Access-Control-Allow-Methods: GET, OPTIONS');
    header('Access-Control-Allow-Headers: Content-Type, CF-Connecting-IP, CF-IPCountry, CF-Ray, CF-Visitor, X-Forwarded-For, X-Forwarded-Proto');
    header('Vary: Origin');
}

// Exit on OPTIONS request (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Rate limiting based on IP with Cloudflare support
function checkRateLimit() {
    // Get the real client IP using Cloudflare's headers if available
    $ip = isset($_SERVER['HTTP_CF_CONNECTING_IP']) ? $_SERVER['HTTP_CF_CONNECTING_IP'] : $_SERVER['REMOTE_ADDR'];
    $rateLimitFile = sys_get_temp_dir() . '/zeronexus_cve_search_rate_' . md5($ip);
    $currentTime = time();
    
    // Check if file exists and read it
    if (file_exists($rateLimitFile)) {
        $data = json_decode(file_get_contents($rateLimitFile), true);
        
        // Reset counter if more than 1 minute has passed
        if ($currentTime - $data['timestamp'] > 60) {
            $data = [
                'count' => 1,
                'timestamp' => $currentTime
            ];
        } else {
            $data['count']++;
            
            // If more than 20 requests in a minute, rate limit
            // Lower limit here since this hits external API
            if ($data['count'] > 20) {
                http_response_code(429);
                echo json_encode(['error' => true, 'message' => 'Too many requests. Please try again later.']);
                exit;
            }
        }
    } else {
        $data = [
            'count' => 1,
            'timestamp' => $currentTime
        ];
    }
    
    // Write updated data
    file_put_contents($rateLimitFile, json_encode($data));
}

// Apply rate limiting
checkRateLimit();

// Clear cache if needed (for testing)
if (isset($_GET['clearCache']) && $_GET['clearCache'] === 'true') {
    $cacheDirs = [
        sys_get_temp_dir() . '/zeronexus_cve_id_cache',
        sys_get_temp_dir() . '/zeronexus_cve_search_cache',
        sys_get_temp_dir() . '/zeronexus_cve_recent_cache',
        sys_get_temp_dir() . '/zeronexus_cve_keyword_cache',
        sys_get_temp_dir() . '/zeronexus_cve_vendor_cache'
    ];

    foreach ($cacheDirs as $dir) {
        if (is_dir($dir)) {
            $files = glob($dir . '/*');
            foreach ($files as $file) {
                if (is_file($file)) {
                    unlink($file);
                }
            }
        }
    }

    // Log cache clearing
    error_log('Cache cleared for CVE APIs');
}

// Get request parameters
$cveId = isset($_GET['id']) ? trim($_GET['id']) : null;
$year = isset($_GET['year']) ? intval($_GET['year']) : null;
$recent = isset($_GET['recent']) ? filter_var($_GET['recent'], FILTER_VALIDATE_BOOLEAN) : false;
$keyword = isset($_GET['keyword']) ? trim($_GET['keyword']) : null;
$vendor = isset($_GET['vendor']) ? trim($_GET['vendor']) : null;
$severity = isset($_GET['severity']) ? trim($_GET['severity']) : null;
$resultsPerPage = isset($_GET['resultsPerPage']) ? min(50, max(1, intval($_GET['resultsPerPage']))) : 20; // 20 results for better display

// Initialize error handling
$error = null;

// Function to make HTTP requests with cURL
function makeRequest($url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 15);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'User-Agent: ZeroNexus-CVE-Tool/1.0'
    ]);
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);
    
    if ($error) {
        throw new Exception("cURL Error: " . $error);
    }
    
    if ($httpCode !== 200) {
        throw new Exception("API returned non-200 status code: " . $httpCode);
    }
    
    return $response;
}

try {
    // Logging all search parameters for debugging
    $paramsList = [];
    if ($cveId) $paramsList[] = "id=$cveId";
    if ($year) $paramsList[] = "year=$year";
    if ($recent) $paramsList[] = "recent=true";
    if ($keyword) $paramsList[] = "keyword=$keyword";
    if ($vendor) $paramsList[] = "vendor=$vendor";
    if ($severity) $paramsList[] = "severity=$severity";
    error_log("Search request with params: " . implode(", ", $paramsList));

    // Handle specific CVE ID lookup (highest priority)
    if ($cveId) {
        // Validate CVE ID format
        if (!preg_match('/^CVE-\d{4}-\d{4,}$/i', $cveId)) {
            throw new Exception("Invalid CVE ID format. Please use format: CVE-YYYY-NNNNN");
        }

        // Check cache first
        $cacheDir = sys_get_temp_dir() . '/zeronexus_cve_id_cache';
        if (!is_dir($cacheDir)) {
            mkdir($cacheDir, 0755, true);
        }

        $cacheKey = md5("cve_id_{$cveId}");
        $cacheFile = $cacheDir . '/' . $cacheKey . '.json';
        $cacheExpiry = 24 * 60 * 60; // 24 hours for specific CVE lookups

        // Cache hit
        if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheExpiry) {
            // Add cache header for monitoring
            header('X-Cache: HIT');
            echo file_get_contents($cacheFile);
            exit;
        }

        // Cache miss, forward the request to the NVD API
        $apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=" . urlencode($cveId);
        $response = makeRequest($apiUrl);

        // Cache the response
        file_put_contents($cacheFile, $response);

        // Return the response with cache miss header
        header('X-Cache: MISS');
        echo $response;
        exit;
    }
    
    // Handle year-based search
    elseif ($year) {
        // Include our special year search implementation
        require_once __DIR__ . '/year-search.php';
        
        try {
            // Use the dedicated year search function with all possible parameters
            // This allows combined searches like year+keyword or year+vendor
            $yearSearchResult = searchCVEsByYear($year, $severity, $resultsPerPage, $keyword, $vendor);
            echo $yearSearchResult;
        } catch (Exception $e) {
            error_log("Error in year-based search: " . $e->getMessage());
            
            // Return empty results structure instead of throwing error
            echo json_encode([
                'resultsPerPage' => 0,
                'startIndex' => 0,
                'totalResults' => 0,
                'format' => 'NVD_CVE',
                'version' => '2.0',
                'timestamp' => date('c'),
                'vulnerabilities' => []
            ]);
        }
        exit;
    }
    
    // Handle recent CVEs request
    elseif ($recent) {
        // Calculate date for recent vulnerabilities (last 30 days)
        // Ensure we use the correct timezone (Zulu/UTC) for the NVD API
        $thirtyDaysAgo = gmdate('Y-m-d\TH:i:s.000\Z', strtotime('-30 days'));
        $now = gmdate('Y-m-d\TH:i:s.000\Z');

        error_log("Recent CVE date range: $thirtyDaysAgo to $now");

        // Check cache first
        $cacheDir = sys_get_temp_dir() . '/zeronexus_cve_recent_cache';
        if (!is_dir($cacheDir)) {
            mkdir($cacheDir, 0755, true);
        }

        // Create a cache key based on parameters
        $cacheKey = md5("recent_severity_{$severity}_limit_{$resultsPerPage}");
        $cacheFile = $cacheDir . '/' . $cacheKey . '.json';
        $cacheExpiry = 1 * 60 * 60; // 1 hour - shorter for recent data

        // Cache hit
        if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheExpiry) {
            // Add cache header for monitoring
            header('X-Cache: HIT');
            echo file_get_contents($cacheFile);
            exit;
        }

        // Cache miss, fetch from API
        // NVD API has changed, so use simple query without date filtering for now
        // This is more reliable even though it's not limited to the last 30 days
        $apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0" .
                  "?noRejected=true" . // Don't include rejected CVEs
                  "&resultsPerPage=" . $resultsPerPage;

        // Log what we're doing
        error_log("Using simpler recent CVEs query to ensure results");

        // Add severity filter if specified
        if ($severity) {
            $validSeverities = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];
            if (in_array(strtoupper($severity), $validSeverities)) {
                $apiUrl .= "&cvssV3Severity=" . urlencode(strtoupper($severity));
            }
        }

        error_log("Making recent CVEs request: $apiUrl");

        try {
            $response = makeRequest($apiUrl);

            // Log and validate response
            error_log("Got recent CVEs response, length: " . strlen($response));

            // Cache the response
            file_put_contents($cacheFile, $response);

            // Return the response with cache miss header
            header('X-Cache: MISS');
            echo $response;
        } catch (Exception $e) {
            error_log("Error fetching recent CVEs: " . $e->getMessage());

            // Return empty results structure instead of throwing error
            echo json_encode([
                'resultsPerPage' => 0,
                'startIndex' => 0,
                'totalResults' => 0,
                'format' => 'NVD_CVE',
                'version' => '2.0',
                'timestamp' => date('c'),
                'vulnerabilities' => []
            ]);
        }
        exit;
    }

    // Handle combined keyword+year or just keyword search
    elseif ($keyword) {
        // Check cache first
        $cacheDir = sys_get_temp_dir() . '/zeronexus_cve_keyword_cache';
        if (!is_dir($cacheDir)) {
            mkdir($cacheDir, 0755, true);
        }

        // Create a cache key based on parameters
        $cacheKey = md5("keyword_{$keyword}_year_{$year}_severity_{$severity}_limit_{$resultsPerPage}");
        $cacheFile = $cacheDir . '/' . $cacheKey . '.json';
        $cacheExpiry = 6 * 60 * 60; // 6 hours cache for keyword searches

        // Cache hit
        if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheExpiry) {
            // Add cache header for monitoring
            header('X-Cache: HIT');
            echo file_get_contents($cacheFile);
            exit;
        }

        // Cache miss, fetch from API
        // Build the API URL for keyword search
        $apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=" . urlencode($keyword) .
                  "&resultsPerPage=50"; // Increased for more results

        // Add year-based date range if year is specified
        if ($year) {
            $startDate = $year . "-01-01T00:00:00.000Z";
            $endDate = $year . "-12-31T23:59:59.999Z";
            $apiUrl .= "&pubStartDate=" . urlencode($startDate) .
                      "&pubEndDate=" . urlencode($endDate);
        }
        // If no year specified, limit to last 5 years to avoid very old results
        else {
            $fiveYearsAgo = date("Y", strtotime("-5 years")) . "-01-01T00:00:00.000Z";
            $now = date("Y-m-d") . "T23:59:59.999Z";
            $apiUrl .= "&pubStartDate=" . urlencode($fiveYearsAgo) .
                      "&pubEndDate=" . urlencode($now);
        }

        // Add severity filter if specified
        if ($severity) {
            $validSeverities = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];
            if (in_array(strtoupper($severity), $validSeverities)) {
                $apiUrl .= "&cvssV3Severity=" . urlencode(strtoupper($severity));
            }
        }

        error_log("Making keyword search request: $apiUrl");

        try {
            $response = makeRequest($apiUrl);

            // Log and validate response
            error_log("Got keyword search response for '$keyword', length: " . strlen($response));

            // Cache the response
            file_put_contents($cacheFile, $response);

            // Return the response with cache miss header
            header('X-Cache: MISS');
            echo $response;
        } catch (Exception $e) {
            error_log("Error in keyword search for '$keyword': " . $e->getMessage());

            // Return empty results structure instead of throwing error
            echo json_encode([
                'resultsPerPage' => 0,
                'startIndex' => 0,
                'totalResults' => 0,
                'format' => 'NVD_CVE',
                'version' => '2.0',
                'timestamp' => date('c'),
                'vulnerabilities' => []
            ]);
        }
        exit;
    }

    // Handle combined vendor+year search or just vendor search
    elseif ($vendor) {
        // Check cache first
        $cacheDir = sys_get_temp_dir() . '/zeronexus_cve_vendor_cache';
        if (!is_dir($cacheDir)) {
            mkdir($cacheDir, 0755, true);
        }

        // Create a cache key based on parameters
        $cacheKey = md5("vendor_{$vendor}_year_{$year}_severity_{$severity}_limit_{$resultsPerPage}");
        $cacheFile = $cacheDir . '/' . $cacheKey . '.json';
        $cacheExpiry = 6 * 60 * 60; // 6 hours cache for vendor searches

        // Cache hit
        if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheExpiry) {
            // Add cache header for monitoring
            header('X-Cache: HIT');
            echo file_get_contents($cacheFile);
            exit;
        }

        // Cache miss, fetch from API
        // First try with keywordSearch which is more reliable than CPE matching
        $apiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=" . urlencode($vendor) .
                  "&resultsPerPage=" . $resultsPerPage;

        // Add year-based date range if year is specified
        if ($year) {
            $startDate = $year . "-01-01T00:00:00.000Z";
            $endDate = $year . "-12-31T23:59:59.999Z";
            $apiUrl .= "&pubStartDate=" . urlencode($startDate) .
                      "&pubEndDate=" . urlencode($endDate);
        }
        // If no year specified, limit to last 5 years to avoid very old results
        else {
            $fiveYearsAgo = date("Y", strtotime("-5 years")) . "-01-01T00:00:00.000Z";
            $now = date("Y-m-d") . "T23:59:59.999Z";
            $apiUrl .= "&pubStartDate=" . urlencode($fiveYearsAgo) .
                      "&pubEndDate=" . urlencode($now);
        }

        // Add severity filter if specified
        if ($severity) {
            $validSeverities = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];
            if (in_array(strtoupper($severity), $validSeverities)) {
                $apiUrl .= "&cvssV3Severity=" . urlencode(strtoupper($severity));
            }
        }

        error_log("Making vendor search request: $apiUrl");

        try {
            $response = makeRequest($apiUrl);
            $responseData = json_decode($response, true);

            // Log and validate response
            error_log("Got vendor search response for '$vendor', length: " . strlen($response));

            // If no results found with keyword search, try with a more specific search
            if (!$responseData || !isset($responseData['vulnerabilities']) || count($responseData['vulnerabilities']) === 0) {
                // Try a fallback to common product vendor search pattern
                // First with vendor: format
                $fallbackApiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=vendor:" . urlencode($vendor) .
                               "&resultsPerPage=" . $resultsPerPage;

                error_log("No results with vendor keyword search, trying fallback: $fallbackApiUrl");

                try {
                    $fallbackResponse = makeRequest($fallbackApiUrl);
                    $fallbackData = json_decode($fallbackResponse, true);

                    if ($fallbackData && isset($fallbackData['vulnerabilities']) && count($fallbackData['vulnerabilities']) > 0) {
                        $response = $fallbackResponse;
                        error_log("Found results with fallback vendor search");
                    } else {
                        // Last fallback: try with CPE name format
                        $cpeApiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=" .
                                   urlencode("cpe:2.3:*:{$vendor}:*:*:*:*:*:*:*:*") .
                                   "&resultsPerPage=" . $resultsPerPage;

                        error_log("Still no results, trying CPE format: $cpeApiUrl");
                        $cpeResponse = makeRequest($cpeApiUrl);
                        $cpeData = json_decode($cpeResponse, true);

                        if ($cpeData && isset($cpeData['vulnerabilities']) && count($cpeData['vulnerabilities']) > 0) {
                            $response = $cpeResponse;
                            error_log("Found results with CPE search");
                        }
                    }
                } catch (Exception $e) {
                    error_log("Error in fallback vendor search for '$vendor': " . $e->getMessage());
                    // Continue with original response
                }
            }

            // Cache the response
            file_put_contents($cacheFile, $response);

            // Return the response with cache miss header
            header('X-Cache: MISS');
            echo $response;
        } catch (Exception $e) {
            error_log("Error in vendor search for '$vendor': " . $e->getMessage());

            // Return empty results structure instead of throwing error
            echo json_encode([
                'resultsPerPage' => 0,
                'startIndex' => 0,
                'totalResults' => 0,
                'format' => 'NVD_CVE',
                'version' => '2.0',
                'timestamp' => date('c'),
                'vulnerabilities' => []
            ]);
        }
        exit;
    }

    // No search parameters provided
    else {
        throw new Exception("Missing required parameter. Please provide 'id', 'year', 'keyword', 'vendor', or 'recent=true'.");
    }
} catch (Exception $e) {
    // Return error in a standardized format
    $error = [
        'error' => true,
        'message' => $e->getMessage()
    ];
    http_response_code(400);
    echo json_encode($error);
    exit;
}