<?php
/**
 * CVE Proxy API
 * 
 * Simple proxy to access the NVD API for CVE lookups.
 * 
 * Parameters:
 * - id: The CVE ID to look up
 */

// Set security headers
header('Content-Type: application/json');
header('X-Content-Type-Options: nosniff');
header('X-Frame-Options: DENY');
header('Referrer-Policy: strict-origin-when-cross-origin');
header('X-XSS-Protection: 1; mode=block');

// Enable CORS for specific origins, with Cloudflare support
$allowedOrigins = [
    'https://zeronexus.net',
    'https://www.zeronexus.net',
    'http://localhost:8081', // For local development
    'http://localhost:8082'  // For alternative local development
];

$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';

// Check if origin is allowed or is a subdomain of zeronexus.net
$isAllowed = in_array($origin, $allowedOrigins);
if (!$isAllowed && preg_match('/^https?:\/\/.*\.zeronexus\.net(:[0-9]+)?$/', $origin)) {
    $isAllowed = true;
}

if ($isAllowed) {
    header("Access-Control-Allow-Origin: $origin");
    header('Access-Control-Allow-Methods: GET, OPTIONS');
    header('Access-Control-Allow-Headers: Content-Type, CF-Connecting-IP, CF-IPCountry, CF-Ray, CF-Visitor, X-Forwarded-For, X-Forwarded-Proto');
    header('Vary: Origin');
}

// Exit on OPTIONS request (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Rate limiting based on IP with Cloudflare support
function checkRateLimit() {
    // Get the real client IP using Cloudflare's headers if available
    $ip = isset($_SERVER['HTTP_CF_CONNECTING_IP']) ? $_SERVER['HTTP_CF_CONNECTING_IP'] : $_SERVER['REMOTE_ADDR'];
    $rateLimitFile = sys_get_temp_dir() . '/zeronexus_cve_rate_' . md5($ip);
    $currentTime = time();
    
    // Check if file exists and read it
    if (file_exists($rateLimitFile)) {
        $data = json_decode(file_get_contents($rateLimitFile), true);
        
        // Reset counter if more than 1 minute has passed
        if ($currentTime - $data['timestamp'] > 60) {
            $data = [
                'count' => 1,
                'timestamp' => $currentTime
            ];
        } else {
            $data['count']++;
            
            // If more than 20 requests in a minute, rate limit
            // Lower limit here since this hits external API
            if ($data['count'] > 20) {
                http_response_code(429);
                echo json_encode(['error' => true, 'message' => 'Too many requests. Please try again later.']);
                exit;
            }
        }
    } else {
        $data = [
            'count' => 1,
            'timestamp' => $currentTime
        ];
    }
    
    // Write updated data
    file_put_contents($rateLimitFile, json_encode($data));
}

// Apply rate limiting
checkRateLimit();

// Get CVE ID from request
$cveId = isset($_GET['id']) ? trim($_GET['id']) : null;

// Initialize error handling
$error = null;

try {
    // Validate input
    if (!$cveId) {
        throw new Exception("Missing required parameter: id");
    }
    
    // Validate CVE ID format
    if (!preg_match('/^CVE-\d{4}-\d{4,}$/i', $cveId)) {
        throw new Exception("Invalid CVE ID format. Please use format: CVE-YYYY-NNNNN");
    }
    
    // Check cache first
    $cacheDir = sys_get_temp_dir() . '/zeronexus_cve_cache';
    if (!is_dir($cacheDir)) {
        mkdir($cacheDir, 0755, true);
    }
    
    $cacheFile = $cacheDir . '/' . md5($cveId) . '.json';
    $cacheExpiry = 24 * 60 * 60; // 24 hours
    
    // Check if cache exists and is not expired
    if (file_exists($cacheFile) && (time() - filemtime($cacheFile)) < $cacheExpiry) {
        // Serve from cache
        $response = file_get_contents($cacheFile);
    } else {
        // Cache miss, fetch from API
        // Initialize cURL session
        $ch = curl_init();
        
        // Set cURL options
        $url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=" . urlencode($cveId);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 15);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'User-Agent: ZeroNexus-CVE-Tool/1.0'
        ]);
        
        // Execute the request
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        // Check for cURL errors
        if (curl_errno($ch)) {
            throw new Exception("cURL Error: " . curl_error($ch));
        }
        
        // Close cURL session
        curl_close($ch);
        
        // Check for non-200 HTTP responses
        if ($httpCode !== 200) {
            throw new Exception("NVD API returned error code: $httpCode");
        }
        
        // Cache the response
        file_put_contents($cacheFile, $response);
    }
    
    // Output the response from NVD
    echo $response;
    
} catch (Exception $e) {
    // Return error in a standardized format
    $error = [
        'error' => true,
        'message' => $e->getMessage()
    ];
    http_response_code(400);
    echo json_encode($error);
}